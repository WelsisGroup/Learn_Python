import re
import telebot
from telebot import util
from datetime import datetime
import DB, req_to_site
from auth_data import TOKEN
from telegram_bot_calendar import DetailedTelegramCalendar
from loguru import logger

bot = telebot.TeleBot(f'{TOKEN}', parse_mode=None)
LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}
user_input_dct = {}
dt_now = datetime.now()

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω') #–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞


''' –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î –ë–û–¢–ê '''


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    DB.create_table_in_db_by_userid(message.chat.id)
    with open(file='logs_command.log', mode='a', encoding='UTF-8') as logfile:
        logfile.write(f'\n{dt_now}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É start/help')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É start/help')
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ Too Easy Travel.\n'
                          '–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–µ–ª–µ–π.\n'
                          'üìâ /lowprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n'
                          'üìà /highprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n'
                          'üîù /bestdeal - —Ç–æ–ø –æ—Ç–µ–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n'
                          'üìí /history - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π\n'
                          'üîß /help - –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã')


@bot.message_handler(func=lambda message:message.text not in
                                         ['/lowprice',
                                          '/bestdeal',
                                          '/highprice',
                                          '/history',
                                          '/help',
                                          '/start'])
def answer_to_some_text(message):
    bot.reply_to(message, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —É –º–µ–Ω—è –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–æ—Ç —ç—Ç–∏:'
                          'üìâ /lowprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n'
                          'üìà /highprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n'
                          'üîù /bestdeal - —Ç–æ–ø –æ—Ç–µ–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n'
                          'üìí /history - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π\n'
                          'üîß /help - –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã')


@bot.message_handler(commands='lowprice')
def send_lowprice(message):
    with open(file='logs_command.log', mode='a', encoding='UTF-8') as logfile:
        logfile.write(f'\n{dt_now}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É lowprice')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É lowprice')
    user_input_dct['command_flag'] = 'lowprice'
    first_step(message)


@bot.message_handler(commands='highprice')
def send_highprice(message):
    with open(file='logs_command.log', mode='a', encoding='UTF-8') as logfile:
        logfile.write(f'\n{dt_now}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É hihgprice')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É hihgprice')
    user_input_dct['command_flag'] = 'highprice'
    first_step(message)


@bot.message_handler(commands='bestdeal')
def send_bestdeal(message):
    with open(file='logs_command.log', mode='a', encoding='UTF-8') as logfile:
        logfile.write(f'\n{dt_now}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É bestdeal')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É bestdeal')
    user_input_dct['command_flag'] = 'bestdeal'
    first_step_bestdeal(message)


@bot.message_handler(commands='history')
def send_history(message):
    with open(file='logs_command.log', mode='a', encoding='UTF-8') as logfile:
        logfile.write(f'\n{dt_now}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É history')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.chat.id} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É history')
    bot.send_message(message.chat.id, message.chat.id)
    history_for_send = DB.print_db_info(message.chat.id)
    for i_elem in history_for_send:
        bot.send_message(message.chat.id, f'–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {i_elem[0]}')
        splitted_text = util.smart_split(i_elem[1], chars_per_string=3000)
        for i_text in splitted_text:
            bot.send_message(message.chat.id, i_text)


''' –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –ë–û–¢–ê'''

''' –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '''


def first_step(message):
    city = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞: '
    bot.send_message(message.chat.id, city)
    bot.register_next_step_handler(message, city_reg)


def city_reg(message):
    user_input_dct['date_flag'] = False
    user_input_dct['date_range'] = []
    user_input_dct['city'] = message.text
    check_in = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: '
    bot.send_message(message.chat.id, check_in)
    input_by_calend_buttons(message)
    while not user_input_dct['date_flag']:
        pass
    check_in_f(message)


def check_in_f(message):
    user_input_dct['date_flag'] = False
    check_out = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞: '
    bot.send_message(message.chat.id, check_out)
    input_by_calend_buttons(message)
    while not user_input_dct['date_flag']:
        pass
    check_out_f(message)


def check_out_f(message):
    user_input_dct['date_difference'] = (user_input_dct['date_range'][1] - user_input_dct['date_range'][0]).days

    num_hotels = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ (–ª–∏–º–∏—Ç: 15 –æ—Ç–µ–ª–µ–π): '
    bot.send_message(message.chat.id, num_hotels)
    bot.register_next_step_handler(message, num_hotels_f)


def num_hotels_f(message):
    if message.text.isdigit():
        if int(message.text) > 15:
            bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–∏—Ñ—Ä–∞. –ú–æ–π –ª–∏–º–∏—Ç 15. –°—Ç–æ–ª—å–∫–æ –∏ –≤—ã–≤–µ–¥—É.')
            user_input_dct['num_hotels'] = 15
        elif int(message.text) <= 15:
            user_input_dct['num_hotels'] = int(message.text)

    send_photo = '–ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è? (–î–∞/–ù–µ—Ç): '
    bot.send_message(message.chat.id, send_photo)
    bot.register_next_step_handler(message, send_photo_f)


def send_photo_f(message):
    if message.text.lower() == '–¥–∞':
        user_input_dct['send_photo'] = True
        bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π')
        num_hot_photo = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è (–ª–∏–º–∏—Ç: 15 —Ñ–æ—Ç–æ): '
        bot.send_message(message.chat.id, num_hot_photo)
        bot.register_next_step_handler(message, num_hot_photo_f)
    elif message.text.lower() == '–Ω–µ—Ç':
        user_input_dct['send_photo'] = False
        bot.send_message(message.chat.id, '–ù–µ –±—É–¥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è.')
        req_and_answer(message)
    else:
        user_input_dct['send_photo'] = False
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n'
                                          '–ù–∞–≤–µ—Ä–Ω–æ–µ, –≤—ã –Ω–µ —Ö–æ—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π.')
        num_hotels_f(message)


def num_hot_photo_f(message):
    if int(message.text) > 15:
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–∏—Ñ—Ä–∞. –ú–æ–π –ª–∏–º–∏—Ç 15. –°—Ç–æ–ª—å–∫–æ –∏ –≤—ã–≤–µ–¥—É.')
        user_input_dct['num_hot_photo'] = 15
    else:
        user_input_dct['num_hot_photo'] = int(message.text)
        req_and_answer(message)


def req_and_answer(message):
    ''' API –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è—Ö '''

    bot.send_message(message.chat.id, '–ò—â—É –æ—Ç–µ–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n'
                                      '–°–∫–æ—Ä–æ—Å—Ç—å –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.')
    check_in = datetime.strftime(user_input_dct['date_range'][0], '%Y-%m-%d')
    check_out = datetime.strftime(user_input_dct['date_range'][1], '%Y-%m-%d')
    destination_id = req_to_site.fst_request_for_destination_id(user_input_dct['city'])
    hotels_lst = req_to_site.sec_request_for_hotel_info(destination_id=destination_id,
                                                        check_in=check_in,
                                                        check_out=check_out)
    sort_results(message, hotels_lst)


def sort_results(message, hotels_lst):
    ''' –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ . '''

    if user_input_dct['command_flag'] == 'lowprice':
        hotels_lst = sorted(hotels_lst, key=lambda i_hotel: i_hotel['ratePlan']['price']['current'])
    elif user_input_dct['command_flag'] == 'highprice':
        hotels_lst = sorted(hotels_lst, key=lambda i_hotel: i_hotel['ratePlan']['price']['current'], reverse=True)
    elif user_input_dct['command_flag'] == 'bestdeal':
        hotels_lst = list(filter(bestdeal_func, hotels_lst))
        if len(hotels_lst) == 0:   
            bot.send_message(message.chat.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return
    print_info(message, hotels_lst)


def bestdeal_func(i_hotel):
    ''' –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è bestdeal '''

    cur_price = int(i_hotel['ratePlan']['price']['exactCurrent'])
    cur_distance = float(i_hotel['landmarks'][0]['distance'].split()[0])
    if (user_input_dct['min_price'] <= cur_price <= user_input_dct['max_price']) \
            and user_input_dct['min_distance'] <= cur_distance <= user_input_dct['max_distance']:
        return i_hotel


def print_info(message, hotels_lst):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–µ–ª—è—Ö'''

    its_already_history = '–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π: '
    bot.send_message(message.chat.id, f'{user_input_dct["city"]}')
    its_already_history = ''.join([its_already_history, f'{user_input_dct["city"]}', '\n'])

    for i_num in range(user_input_dct['num_hotels']):
        print_hotel_count = f'====={i_num + 1} –û–¢–ï–õ–¨====='
        bot.send_message(message.chat.id, print_hotel_count)
        its_already_history = ''.join([its_already_history, print_hotel_count, '\n'])

        answer_to_user = f'\n–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: ' \
                         f'{hotels_lst[i_num].get("name")}\n' \
                         f'–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è: ' \
                         f'{hotels_lst[i_num].get("starRating")} –∑–≤—ë–∑–¥\n' \
                         f'–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: ' \
                         f'{hotels_lst[i_num]["address"].get("streetAddress")}, ' \
                         f'{hotels_lst[i_num]["address"].get("locality")}, ' \
                         f'{hotels_lst[i_num]["address"].get("postalCode")}, ' \
                         f'{hotels_lst[i_num]["address"].get("region")}, ' \
                         f'{hotels_lst[i_num]["address"].get("countryName")}\n' \
                         f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: ' \
                         f'{hotels_lst[i_num]["landmarks"][0].get("distance")}\n' \
                         f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: ' \
                         f'{hotels_lst[i_num]["ratePlan"]["price"].get("current")}\n' \
                         f'–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∑–∞ {user_input_dct["date_difference"]} –¥–Ω–µ–π: ' \
                         f'{int(hotels_lst[i_num]["ratePlan"]["price"].get("exactCurrent")) * user_input_dct["date_difference"]}$\n' \
                         f'URL –∞–¥—Ä–µ—Å –æ—Ç–µ–ª—è: ' \
                         f'{hotels_lst[i_num].get("urls")}\n'
        bot.send_message(message.chat.id, answer_to_user)
        its_already_history = ''.join([its_already_history, answer_to_user, '\n'])

        if user_input_dct['send_photo']:
            photo_url_lst = req_to_site.third_request_for_hotels_photo(
                hotel_id=hotels_lst[i_num]['id'], num_hot_photo=user_input_dct['num_hot_photo']
            )
            its_already_history = ''.join([its_already_history, '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π: ', '\n'])
            for i_photo_url in photo_url_lst:
                bot.send_message(message.chat.id, i_photo_url)
                its_already_history = ''.join([its_already_history, i_photo_url, '\n'])
    else:
        bot.send_message(message.chat.id, '–í—ã–≤–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!')
    DB.add_data_to_db(message.chat.id, its_already_history)


''' –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–º–∞–Ω–¥—ã bestdeal'''


def first_step_bestdeal(message):
    input_text = '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è [$]'
    bot.send_message(message.chat.id, input_text)
    bot.register_next_step_handler(message, max_price_f)


def max_price_f(message):
    users_price = re.findall(r'\d+', message.text)
    if len(users_price) == 2:
        users_price = float('.'.join([users_price[0], users_price[1]]))
    elif len(users_price) == 1:
        users_price = float(users_price[0])
    user_input_dct['min_price'] = users_price
    input_text = '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è [$]'
    bot.send_message(message.chat.id, input_text)
    bot.register_next_step_handler(message, min_distance_f)


def min_distance_f(message):
    users_price = re.findall(r'\d+', message.text)
    if len(users_price) == 2:
        users_price = float('.'.join([users_price[0], users_price[1]]))
    elif len(users_price) == 1:
        users_price = float(users_price[0])
    user_input_dct['max_price'] = users_price
    input_text = '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –æ—Ç–µ–ª—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ [–º–µ—Ç—Ä]'
    bot.send_message(message.chat.id, input_text)
    bot.register_next_step_handler(message, max_distance_f)


def max_distance_f(message):
    users_distance = float(re.search(r'\d+', message.text).group(0))
    user_input_dct['min_distance'] = round(users_distance / 1609.34, 2)
    input_text = '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –æ—Ç–µ–ª—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ [–º–µ—Ç—Ä]'
    bot.send_message(message.chat.id, input_text)
    bot.register_next_step_handler(message, from_bestdeal_to_common_struct)


def from_bestdeal_to_common_struct(message):
    users_distance = float(re.search(r'\d+', message.text).group(0))
    user_input_dct['max_distance'] = round(users_distance / 1609.34, 2)
    first_step(message)


''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è '''


def input_by_calend_buttons(message):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è '''
    calendar, step = DetailedTelegramCalendar(locale='ru').build()
    bot.send_message(message.chat.id,
                     f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {LSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal1(c):
    ''' –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã '''
    result, key, step = DetailedTelegramCalendar(locale='ru').process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ: {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        user_input_dct['date_flag'] = True
        user_input_dct['date_range'].append(result)
        bot.edit_message_text(f"–í–∞—à –≤—ã–±–æ—Ä: {result} ",
                              c.message.chat.id,
                              c.message.message_id)


bot.infinity_polling() #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
